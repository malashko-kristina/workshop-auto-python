name: Run System Tests

on:
  push:
    branches: [ "main", "final-version", "Configure-CI" ]
  pull_request:
    branches: [ "main", "final-version", "Configure-CI" ]
  workflow_dispatch:

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.10
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"
          architecture: "x64"
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Install flake8
        run: pip install flake8
      - name: Run flake8 and continue even with errors
        run: |
          flake8 . || true
      - name: Install Black
        run: pip install black
      - name: Auto-format code with Black
        run: black .
      - run: echo "Code formatting with Black after running Flake8 successful"

  run-tests:
    needs: lint
    if: ${{ github.event_name == 'workflow_dispatch' || needs.lint.result == 'success' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Docker
        uses: docker/setup-buildx-action@v1

      - name: Prepare Logs Directory
        run: |
          mkdir -p ./logs  
          sudo chown -R 1000:1000 ./logs 

      - name: Create Docker Network
        run: |
          docker network create teamcity-network

      - name: Run TeamCity Server Container
        run: |
          docker run -d --name teamcity-server-instance --network teamcity-network -v ${{ github.workspace }}/logs:/opt/teamcity/logs -p 8111:8111 jetbrains/teamcity-server
          echo "Waiting for TeamCity server to start..."
          for i in {1..30}; do
                  if docker logs teamcity-server-instance 2>&1 | grep -q 'TeamCity process PID is'; then
                    echo "TeamCity server started successfully."
                    break
                  fi
                  echo "Waiting..."
                  sleep 5
                done
                echo "Docker Status:"
                docker ps -a
                echo "TeamCity Server Logs:"
                docker logs teamcity-server-instance

      - name: Check Port Availability
        run: |
          echo "Checking if port 8111 is open..."
          if nc -z localhost 8111; then
            echo "Port 8111 is open."
          else
            echo "Port 8111 is not open."
          fi

      - name: Install Python Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y python3.10 python3-pip
          pip install -r requirements.txt

      - name: Install Playwright Dependencies
        run: |
          npm install playwright
          npx playwright install-deps

      - name: Run TeamCity Agent Container
        run: |
          docker run -d --name teamcity-agent-instance --network teamcity-network -e SERVER_URL="http://teamcity-server-instance:8111" jetbrains/teamcity-agent

      - name: Run Set Up Test
        run: |
          playwright install
          pytest -v tests/frontend/test_set_up.py 

      - name: Retrieve Super User Token
        run: |
          timeout=180 
          while [ $timeout -gt 0 ]; do
            if docker logs teamcity-server-instance 2>&1 | grep -q 'Super user authentication token'; then
              echo "Token found in logs, extracting..."
              token=$(docker logs teamcity-server-instance 2>&1 | grep -oP 'Super user authentication token: \K[0-9]+')
              echo "Super user token: $token"
              echo "SUPER_USER_TOKEN=$token" >> $GITHUB_ENV
              break
            else
              echo "Token not found, waiting..."
              sleep 10
              timeout=$((timeout-10))
            fi
          done
          if [ $timeout -le 0 ]; then
            echo "Failed to retrieve super user token within the timeout period."
          fi

      - name: Run Tests
        id: run-tests
        continue-on-error: true
        run: |
          pytest -v --alluredir=results --ignore=tests/frontend/test_set_up.py || exit 1
          echo "::set-output name=run-tests-success::true"

      - name: Check Results Directory
        run: ls -lah ./results

      - name: Install Allure
        run: |
          npm install -g allure-commandline

      - name: Generate Allure Report
        run: |
          allure generate ./results --clean -o ./allure-report
          echo "Allure Report generated successfully."
          ls -lah ./allure-report

      - name: Save Allure Report Artifact
        uses: actions/upload-artifact@v2
        with:
          name: allure-report
          path: ./allure-report

      - name: Load test report history
        uses: actions/checkout@v2
        if: always()
        continue-on-error: true
        with:
          ref: gh-pages
          path: gh-pages

      - name: Build test report
        uses: simple-elf/allure-report-action@v1.7
        if: always()
        with:
          gh_pages: gh-pages
          allure_history: allure-history
          allure_results: results

      - name: Publish test report
        uses: peaceiris/actions-gh-pages@v3
        if: always()
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: allure-history

